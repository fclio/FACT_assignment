diff --git a/config/offline.py b/config/offline.py
index 1dd7eb6..1de1f1f 100644
--- a/config/offline.py
+++ b/config/offline.py
@@ -26,7 +26,7 @@ base = {
         'n_epochs_ref': 50,
         'n_saves': 3,
         'logbase': logbase,
-        'device': 'cuda',
+        'device': 'cpu',
 
         'n_embd': 32,
         'batch_size': 256,
@@ -53,7 +53,7 @@ base = {
         'logbase': logbase,
         'gpt_loadpath': gpt_expname,
         'gpt_epoch': 'latest',
-        'device': 'cuda',
+        'device': 'cpu',
         'renderer': 'Renderer',
 
         'plan_freq': 1,
diff --git a/environment.yml b/environment.yml
index 19b5c9d..b48d1c2 100644
--- a/environment.yml
+++ b/environment.yml
@@ -9,8 +9,9 @@ dependencies:
 - pip:
     - -f https://download.pytorch.org/whl/torch_stable.html
     - numpy
-    - gym==0.18.0
-    - mujoco-py==2.0.2.13
+    - wheel==0.38.4
+    - setuptools==65.5.0
+    - gym==0.20.0
     - matplotlib==3.3.4
     - torch==1.9.1+cu111
     - typed-argument-parser
diff --git a/scripts/plan.py b/scripts/plan.py
index b66af43..f13d4cc 100644
--- a/scripts/plan.py
+++ b/scripts/plan.py
@@ -36,6 +36,7 @@ gpt, gpt_epoch = utils.load_model(args.logbase, args.dataset, args.gpt_loadpath,
 #######################
 
 env = datasets.load_environment(args.dataset)
+print('yo')
 renderer = utils.make_renderer(args)
 timer = utils.timer.Timer()
 
@@ -47,6 +48,8 @@ action_dim = dataset.action_dim
 value_fn = lambda x: discretizer.value_fn(x, args.percentile)
 preprocess_fn = datasets.get_preprocess_fn(env.name)
 
+print('yo2')
+
 #######################
 ###### main loop ######
 #######################
diff --git a/trajectory/datasets/sequence.py b/trajectory/datasets/sequence.py
index 18eefff..f58c37d 100644
--- a/trajectory/datasets/sequence.py
+++ b/trajectory/datasets/sequence.py
@@ -33,7 +33,7 @@ def segment(observations, terminals, max_path_length):
 
     ## pad trajectories to be of equal length
     trajectories_pad = np.zeros((n_trajectories, max_path_length, observation_dim), dtype=trajectories[0].dtype)
-    early_termination = np.zeros((n_trajectories, max_path_length), dtype=np.bool)
+    early_termination = np.zeros((n_trajectories, max_path_length), dtype=bool)
     for i, traj in enumerate(trajectories):
         path_length = path_lengths[i]
         trajectories_pad[i,:path_length] = traj
@@ -43,7 +43,7 @@ def segment(observations, terminals, max_path_length):
 
 class SequenceDataset(torch.utils.data.Dataset):
 
-    def __init__(self, env, sequence_length=250, step=10, discount=0.99, max_path_length=1000, penalty=None, device='cuda:0'):
+    def __init__(self, env, sequence_length=250, step=10, discount=0.99, max_path_length=1000, penalty=None, device='cpu'):
         print(f'[ datasets/sequence ] Sequence length: {sequence_length} | Step: {step} | Max path length: {max_path_length}')
         self.env = env = load_environment(env) if type(env) is str else env
         self.sequence_length = sequence_length
@@ -124,7 +124,7 @@ class SequenceDataset(torch.utils.data.Dataset):
         ], axis=1)
         self.termination_flags = np.concatenate([
             self.termination_flags,
-            np.ones((n_trajectories, sequence_length-1), dtype=np.bool),
+            np.ones((n_trajectories, sequence_length-1), dtype=bool),
         ], axis=1)
 
     def __len__(self):
diff --git a/trajectory/models/embeddings.py b/trajectory/models/embeddings.py
index 496ac73..0842774 100644
--- a/trajectory/models/embeddings.py
+++ b/trajectory/models/embeddings.py
@@ -40,8 +40,8 @@ class SmoothEmbedding(nn.Module):
 		if stop_token:
 			self.weights = add_stop_token(self.weights)
 			num_embeddings += 1
-		self.weights = torch.tensor(self.weights, dtype=torch.float, device='cuda:0')
-		self.inds = torch.arange(0, num_embeddings, device='cuda:0')
+		self.weights = torch.tensor(self.weights, dtype=torch.float, device='cpu')
+		self.inds = torch.arange(0, num_embeddings, device='cpu')
 		self._embeddings = nn.Embedding(num_embeddings, embedding_dim)
 
 	def forward(self, x):
diff --git a/trajectory/utils/arrays.py b/trajectory/utils/arrays.py
index d80dcc8..8abc5d2 100644
--- a/trajectory/utils/arrays.py
+++ b/trajectory/utils/arrays.py
@@ -2,7 +2,7 @@ import numpy as np
 import torch
 
 DTYPE = torch.float
-DEVICE = 'cuda:0'
+DEVICE = 'cpu'
 
 def to_np(x):
 	if torch.is_tensor(x):
@@ -35,3 +35,5 @@ def set_device(device):
 	DEVICE = device
 	if 'cuda' in device:
 		torch.set_default_tensor_type(torch.cuda.FloatTensor)
+	if 'cpu' in device:
+		torch.set_default_tensor_type(torch.cpu.FloatTensor)
diff --git a/trajectory/utils/serialization.py b/trajectory/utils/serialization.py
index 13c81ad..ee13788 100644
--- a/trajectory/utils/serialization.py
+++ b/trajectory/utils/serialization.py
@@ -31,7 +31,7 @@ def get_latest_epoch(loadpath):
         latest_epoch = max(epoch, latest_epoch)
     return latest_epoch
 
-def load_model(*loadpath, epoch=None, device='cuda:0'):
+def load_model(*loadpath, epoch=None, device='cpu'):
     loadpath = os.path.join(*loadpath)
     config_path = os.path.join(loadpath, 'model_config.pkl')
 
@@ -42,7 +42,7 @@ def load_model(*loadpath, epoch=None, device='cuda:0'):
     state_path = os.path.join(loadpath, f'state_{epoch}.pt')
 
     config = pickle.load(open(config_path, 'rb'))
-    state = torch.load(state_path)
+    state = torch.load(state_path, map_location=torch.device('cpu'))
 
     model = config()
     model.to(device)
diff --git a/trajectory/utils/setup.py b/trajectory/utils/setup.py
index fa8217d..2ec6f3e 100644
--- a/trajectory/utils/setup.py
+++ b/trajectory/utils/setup.py
@@ -17,7 +17,7 @@ def set_seed(seed):
     random.seed(seed)
     np.random.seed(seed)
     torch.manual_seed(seed)
-    torch.cuda.manual_seed_all(seed)
+    # torch.cuda.manual_seed_all(seed)
 
 def watch(args_to_watch):
     def _fn(args):